
#pragma kernel PrecomputeChunkSampler

#include "SimplexNoise3D.compute"

// Offsets for changing sample locations
int xOffset = 0;
int yOffset = 0;
int zOffset = 0;

// indexing for rendering test images
uint2 imageIndexing(uint3 id, int imageSize) {
	int2 index = int2(0, 0);
	index.x = id.x;
	index.y = id.y + (id.z * imageSize);
	return index;
}

// indexing for rendering arrays
int idIndexing(uint3 id, int size) {
	return id.x + (size* id.y) + (size*size*id.z);
}

RWTexture2D<float4> DebugImage;
RWStructuredBuffer<float> SampleField;

// Method for taking samples
static const float sampleRate = 16.0f;
float takeSample(uint3 id) {
	int3 pos = int3(id);
	float3 location = float3(pos.x + xOffset, pos.y + yOffset, pos.z + zOffset) / sampleRate;
	return snoise(location); // snoise Range[-1, 1] so add 1 so it when adding to image.
}

float sampleForImage(float input) {
	return (input + 1) / 2;
}

[numthreads(6,6,6)]
void PrecomputeChunkSampler (uint3 id : SV_DispatchThreadID)
{
	float value = takeSample(id);
	DebugImage[imageIndexing(id, 18)] = sampleForImage(value);
	SampleField[idIndexing(id, 18)]   = value;
}
