#include "SimplexNoise3D.compute"

static int volumeSize = 16;

//If I need to replace Noise function it can easly be done here.
float sampleProxy(float3 location) {
	return snoise(location);
}

//Used to map id's to image locations in a way that make sence.
uint2 imageIndexing(uint3 id) {
	uint2 index = uint2(-1, -1);

	index.x = id.x + volumeSize*(id.z % 4);
	index.y = id.y + volumeSize*((int)(id.z / 4));

	return index;
}

//Indexing to one dimentional varables.
int idIndexing(uint3 id) {
	return id.x + (volumeSize* id.y) + (volumeSize*volumeSize*id.z);
}

static const float3 CubeOffSets[8] =
{ //  x,y,z
	float3(0,0,0), // 0
	float3(0,1,0), // 1 
	float3(1,1,0), // 2
	float3(1,0,0), // 3

	float3(0,0,1), // 4 
	float3(0,1,1), // 5 
	float3(1,1,1), // 6
	float3(1,0,1)  // 7
};

//Used to shift the cordinate that I'm sampling from.
int xOffset = 0;
int yOffset = 0;
int zOffset = 0;

//Size = 16^3; The size of array must be a literal scalar expression.
//loat previouslySampledLocations[4096];

static const float sampleRate = 32.0f;
float takeSample(uint3 id) {
	float3 location = float3(id.x + xOffset, id.y + yOffset, id.z + zOffset) / sampleRate;
	float noise = sampleProxy(location); // snoise Range[-1, 1] so add 1 so it when adding to image.
	previouslySampledLocations[idIndexing(id)] = noise;

	return noise;
}

